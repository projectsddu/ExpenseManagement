//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExpenseManagementClient.ExpenseServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExpenseModel", Namespace="http://schemas.datacontract.org/2004/07/ExpenseManagement.Models")]
    [System.SerializableAttribute()]
    public partial class ExpenseModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float ExpenseAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExpenseDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExpenseDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExpenseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExpenseUserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float ExpenseAmount {
            get {
                return this.ExpenseAmountField;
            }
            set {
                if ((this.ExpenseAmountField.Equals(value) != true)) {
                    this.ExpenseAmountField = value;
                    this.RaisePropertyChanged("ExpenseAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpenseDate {
            get {
                return this.ExpenseDateField;
            }
            set {
                if ((this.ExpenseDateField.Equals(value) != true)) {
                    this.ExpenseDateField = value;
                    this.RaisePropertyChanged("ExpenseDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExpenseDescription {
            get {
                return this.ExpenseDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpenseDescriptionField, value) != true)) {
                    this.ExpenseDescriptionField = value;
                    this.RaisePropertyChanged("ExpenseDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExpenseId {
            get {
                return this.ExpenseIdField;
            }
            set {
                if ((this.ExpenseIdField.Equals(value) != true)) {
                    this.ExpenseIdField = value;
                    this.RaisePropertyChanged("ExpenseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExpenseUserId {
            get {
                return this.ExpenseUserIdField;
            }
            set {
                if ((this.ExpenseUserIdField.Equals(value) != true)) {
                    this.ExpenseUserIdField = value;
                    this.RaisePropertyChanged("ExpenseUserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ExpenseServiceReference.IExpenseService")]
    public interface IExpenseService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExpenseService/AddExpense", ReplyAction="http://tempuri.org/IExpenseService/AddExpenseResponse")]
        ExpenseManagementClient.ExpenseServiceReference.ExpenseModel AddExpense(ExpenseManagementClient.ExpenseServiceReference.ExpenseModel expense);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExpenseService/AddExpense", ReplyAction="http://tempuri.org/IExpenseService/AddExpenseResponse")]
        System.Threading.Tasks.Task<ExpenseManagementClient.ExpenseServiceReference.ExpenseModel> AddExpenseAsync(ExpenseManagementClient.ExpenseServiceReference.ExpenseModel expense);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExpenseService/DeleteExpense", ReplyAction="http://tempuri.org/IExpenseService/DeleteExpenseResponse")]
        bool DeleteExpense(int ExpenseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExpenseService/DeleteExpense", ReplyAction="http://tempuri.org/IExpenseService/DeleteExpenseResponse")]
        System.Threading.Tasks.Task<bool> DeleteExpenseAsync(int ExpenseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExpenseService/UpdateExpense", ReplyAction="http://tempuri.org/IExpenseService/UpdateExpenseResponse")]
        ExpenseManagementClient.ExpenseServiceReference.ExpenseModel UpdateExpense(ExpenseManagementClient.ExpenseServiceReference.ExpenseModel expense);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExpenseService/UpdateExpense", ReplyAction="http://tempuri.org/IExpenseService/UpdateExpenseResponse")]
        System.Threading.Tasks.Task<ExpenseManagementClient.ExpenseServiceReference.ExpenseModel> UpdateExpenseAsync(ExpenseManagementClient.ExpenseServiceReference.ExpenseModel expense);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExpenseService/ViewSingleExpense", ReplyAction="http://tempuri.org/IExpenseService/ViewSingleExpenseResponse")]
        ExpenseManagementClient.ExpenseServiceReference.ExpenseModel ViewSingleExpense(int ExpenseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExpenseService/ViewSingleExpense", ReplyAction="http://tempuri.org/IExpenseService/ViewSingleExpenseResponse")]
        System.Threading.Tasks.Task<ExpenseManagementClient.ExpenseServiceReference.ExpenseModel> ViewSingleExpenseAsync(int ExpenseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExpenseService/ViewAllExpense", ReplyAction="http://tempuri.org/IExpenseService/ViewAllExpenseResponse")]
        ExpenseManagementClient.ExpenseServiceReference.ExpenseModel[] ViewAllExpense();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExpenseService/ViewAllExpense", ReplyAction="http://tempuri.org/IExpenseService/ViewAllExpenseResponse")]
        System.Threading.Tasks.Task<ExpenseManagementClient.ExpenseServiceReference.ExpenseModel[]> ViewAllExpenseAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExpenseServiceChannel : ExpenseManagementClient.ExpenseServiceReference.IExpenseService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExpenseServiceClient : System.ServiceModel.ClientBase<ExpenseManagementClient.ExpenseServiceReference.IExpenseService>, ExpenseManagementClient.ExpenseServiceReference.IExpenseService {
        
        public ExpenseServiceClient() {
        }
        
        public ExpenseServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ExpenseServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExpenseServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExpenseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ExpenseManagementClient.ExpenseServiceReference.ExpenseModel AddExpense(ExpenseManagementClient.ExpenseServiceReference.ExpenseModel expense) {
            return base.Channel.AddExpense(expense);
        }
        
        public System.Threading.Tasks.Task<ExpenseManagementClient.ExpenseServiceReference.ExpenseModel> AddExpenseAsync(ExpenseManagementClient.ExpenseServiceReference.ExpenseModel expense) {
            return base.Channel.AddExpenseAsync(expense);
        }
        
        public bool DeleteExpense(int ExpenseId) {
            return base.Channel.DeleteExpense(ExpenseId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteExpenseAsync(int ExpenseId) {
            return base.Channel.DeleteExpenseAsync(ExpenseId);
        }
        
        public ExpenseManagementClient.ExpenseServiceReference.ExpenseModel UpdateExpense(ExpenseManagementClient.ExpenseServiceReference.ExpenseModel expense) {
            return base.Channel.UpdateExpense(expense);
        }
        
        public System.Threading.Tasks.Task<ExpenseManagementClient.ExpenseServiceReference.ExpenseModel> UpdateExpenseAsync(ExpenseManagementClient.ExpenseServiceReference.ExpenseModel expense) {
            return base.Channel.UpdateExpenseAsync(expense);
        }
        
        public ExpenseManagementClient.ExpenseServiceReference.ExpenseModel ViewSingleExpense(int ExpenseId) {
            return base.Channel.ViewSingleExpense(ExpenseId);
        }
        
        public System.Threading.Tasks.Task<ExpenseManagementClient.ExpenseServiceReference.ExpenseModel> ViewSingleExpenseAsync(int ExpenseId) {
            return base.Channel.ViewSingleExpenseAsync(ExpenseId);
        }
        
        public ExpenseManagementClient.ExpenseServiceReference.ExpenseModel[] ViewAllExpense() {
            return base.Channel.ViewAllExpense();
        }
        
        public System.Threading.Tasks.Task<ExpenseManagementClient.ExpenseServiceReference.ExpenseModel[]> ViewAllExpenseAsync() {
            return base.Channel.ViewAllExpenseAsync();
        }
    }
}
